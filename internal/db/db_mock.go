// Code generated by MockGen. DO NOT EDIT.
// Source: F:\shorturl\internal\db\db.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	config "github.com/Dreeedy/shorturl/internal/config"
	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx"
	zap "go.uber.org/zap"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetConnPool mocks base method.
func (m *MockDB) GetConnPool() *pgx.ConnPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnPool")
	ret0, _ := ret[0].(*pgx.ConnPool)
	return ret0
}

// GetConnPool indicates an expected call of GetConnPool.
func (mr *MockDBMockRecorder) GetConnPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnPool", reflect.TypeOf((*MockDB)(nil).GetConnPool))
}

// InitDB mocks base method.
func (m *MockDB) InitDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDB indicates an expected call of InitDB.
func (mr *MockDBMockRecorder) InitDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDB", reflect.TypeOf((*MockDB)(nil).InitDB))
}

// NewDB mocks base method.
func (m *MockDB) NewDB(newConfig config.Config, newLogger *zap.Logger) (*DBImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDB", newConfig, newLogger)
	ret0, _ := ret[0].(*DBImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDB indicates an expected call of NewDB.
func (mr *MockDBMockRecorder) NewDB(newConfig, newLogger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDB", reflect.TypeOf((*MockDB)(nil).NewDB), newConfig, newLogger)
}

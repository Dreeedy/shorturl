// Code generated by MockGen. DO NOT EDIT.
// Source: F:\shorturl\internal\services\authservice\authservice.go

// Package authservice is a generated GoMock package.
package authservice

import (
	http "net/http"
	reflect "reflect"

	config "github.com/Dreeedy/shorturl/internal/config"
	db "github.com/Dreeedy/shorturl/internal/db"
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthService) Auth(w http.ResponseWriter, userID int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", w, userID)
	ret0, _ := ret[0].(int)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthServiceMockRecorder) Auth(w, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthService)(nil).Auth), w, userID)
}

// BuildJWTString mocks base method.
func (m *MockAuthService) BuildJWTString(useDefaultUser bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildJWTString", useDefaultUser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildJWTString indicates an expected call of BuildJWTString.
func (mr *MockAuthServiceMockRecorder) BuildJWTString(useDefaultUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildJWTString", reflect.TypeOf((*MockAuthService)(nil).BuildJWTString), useDefaultUser)
}

// CreateCookie mocks base method.
func (m *MockAuthService) CreateCookie(tokenString string) *http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCookie", tokenString)
	ret0, _ := ret[0].(*http.Cookie)
	return ret0
}

// CreateCookie indicates an expected call of CreateCookie.
func (mr *MockAuthServiceMockRecorder) CreateCookie(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCookie", reflect.TypeOf((*MockAuthService)(nil).CreateCookie), tokenString)
}

// NewAuthService mocks base method.
func (m *MockAuthService) NewAuthService(newConfig config.Config, newLogger *zap.Logger, newUsertService *db.UsertService) *AuthServiceImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAuthService", newConfig, newLogger, newUsertService)
	ret0, _ := ret[0].(*AuthServiceImpl)
	return ret0
}

// NewAuthService indicates an expected call of NewAuthService.
func (mr *MockAuthServiceMockRecorder) NewAuthService(newConfig, newLogger, newUsertService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAuthService", reflect.TypeOf((*MockAuthService)(nil).NewAuthService), newConfig, newLogger, newUsertService)
}

// ValidateToken mocks base method.
func (m *MockAuthService) ValidateToken(tokenString string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(int)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceMockRecorder) ValidateToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthService)(nil).ValidateToken), tokenString)
}
